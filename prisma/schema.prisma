// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  name            String
  password        String
  avatar          String?
  role            Role         @default(USER)
  isEmailVerified Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  Token           Token[]
  github          String?
  Project         Project[]
  Timeline        Timeline[]
  Task            Task[]
  Brainstorm      Brainstorm[]
  favourites      String[]
}

model Token {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Project {
  id           String       @id @default(uuid())
  name         String       @unique
  description  String
  status       Status
  design_url   String?
  flow_diagram String?
  logo         String?
  user         User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  stack        Stack?       @relation(name: "ProjectToStack")
  brainstorms  Brainstorm[]
  tasks        Task[]
  timeline     Timeline[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Stack {
  id        String   @id @default(uuid())
  frontend  String[]
  backend   String[]
  misc      String[]
  project   Project? @relation(name: "ProjectToStack", fields: [projectId], references: [id])
  projectId String?  @unique
}

model Brainstorm {
  id        String   @id @default(uuid())
  text      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Task {
  id        String       @id @default(uuid())
  taskId    String
  title     String
  content   String
  type      TaskType
  columnId  TaskColumnId
  priority  TaskPriority
  project   Project      @relation(fields: [projectId], references: [id])
  projectId String
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Timeline {
  id        String   @id @default(uuid())
  text      String
  image     String?
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id       String @id @default(uuid())
  file_url String @unique
  key      String @unique
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum Status {
  DRAFT
  IN_PROGRESS
  COMPLETED
  CANCELLED
  INACTIVE
}

enum TaskType {
  FEATURE
  BUG
  DOCUMENTATION
}

enum TaskColumnId {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}
