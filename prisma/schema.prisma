// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  name            String
  password        String
  avatar          String?
  role            Role           @default(USER)
  isEmailVerified Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Token           Token[]
  github          String?
  Project         Project[]
  Collaborator    Collaborator[]
  Timeline        Timeline[]
  Task            Task[]
  BrainStorm      BrainStorm[]
}

model Token {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Project {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String
  status        Status
  design_url    String?
  flow_diagram  String?
  logo          String?
  user          User           @relation(fields: [creatorId], references: [id])
  creatorId     String
  stack         Stack?         @relation(name: "ProjectToStack")
  collaborators Collaborator[]
  brainstorms   BrainStorm[]
  tasks         Task[]
  timeline      Timeline[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Stack {
  id        String   @id @default(uuid())
  frontend  String[]
  backend   String[]
  misc      String[]
  project   Project? @relation(name: "ProjectToStack", fields: [projectId], references: [id])
  projectId String?  @unique
}

model BrainStorm {
  id        String   @id @default(uuid())
  text      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Collaborator {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model Task {
  id                 String   @id @default(uuid())
  name               String
  description        String?
  progressPercentage Int
  project            Project  @relation(fields: [projectId], references: [id])
  projectId          String
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Timeline {
  id        String   @id @default(uuid())
  text      String
  image     String?
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum Status {
  DRAFT
  IN_PROGRESS
  COMPLETED
  CANCELLED
  INACTIVE
}
